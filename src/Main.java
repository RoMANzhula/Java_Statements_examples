public class Main {
    public static void main(String[] args) {
        int x = 1;
        int y = 5;
        int i = 10;
        int j = 15;
        int result = 0;

        ////математичні оператори
        result = x + y; // оператор додавання
        result = j - i; // оператор віднімання
        result = x * y; // оператор множення
        result = j / i; // оператор ділення (результат = 1, залишок просто відкидається для int)
        result = j % i; // залишок від ділення (результат = 5)
        result = -y; // зміна полярності значення змінної на мінус (якщо було мінусове, змінює на +)
        result = +y; // марний оператор (не змінює нічого)


        ////оператори порівняння - тип даних boolean (true/false)
        if (x < y) result = 100; // оператор менше (якщо менше, то true)
        if (i > j) result = 500; // оператор більше (якщо більше, то true)
        if (x <= y) result = 100; // оператор менше або рівне
        if (i >= j) result = 500; // оператор більше або рівне
        if (x == y) result = 100; // оператор рівності
        if (i != j) result = 500; // оператор нерівності


        ////логічні оператори
        if (x == y && i == j) result = 100; // оператор "І" (якщо обидва умови істинні, т.е. true, то результат виразу true)
        if (x == y || i == j) result = 100; // оператор "АБО" (якщо одне з умов істинне, т.е. true, то результат виразу true)
        if (!true) result = 100; // оператор "НЕ" (результат виразу true, тільки якщо умова false)


        ////побітові оператори (1 - це true, 0 - це false)
        if ((1 & 1) == 1) result = 101; // побітовий "І" - якщо обидва умови true, то і результат true
        if ((1 & 0) == 0) result = 102; // побітовий "І" - якщо одне з умов false, то і результат false
        if ((1 | 0) == 1) result = 103; // побітовий "АБО" - якщо одне з умов true, то і результат true
        if ((1 | 1) == 1) result = 104; // побітовий "АБО" - якщо одне з умов true, то і результат true
        if ((0 | 0) == 0) result = 105; // побітовий "АБО" - якщо обидва умови false, то і результат false
        // (~1 == 0) побітове "НЕ" - !true == false
        // (~0 == 1) побітове "НЕ" - !false == true
        // 0 ^ 0 == 0 побітовий "ХОР" - "виключаюче або" - якщо обидва умови false, то результат false
        // 1 ^ 1 == 0 побітовий "ХОР" - "виключаюче або" - якщо обидва умови true, результат false
        // 1 ^ 0 == 1 побітовий "ХОР" - "виключаюче або" - якщо одне з умов true, а друге false, результат true
        // 0 ^ 1 == 1 побітовий "ХОР" - "виключаюче або" - якщо одне з умов false, а друге true, результат true
        // x >> y - побітовий зсув вправо (переміщує біти числа х на у розрядів вправо (приклад 00101101 >> 1 = 00010110)),
        // для від'ємних чисел нові розряди заповнюються 1 (10001010 >> 2 = 11100010)
        // х << у - побітовий зсув вліво (переміщує біти числа х на у розрядів вправо (приклад 00101101 << 1 = 010110100)),
        // для від'ємних чисел нові розряди заповнюються 1 (10001010 >> 2 = 11100010)
        // х >>> у - побітовий зсув вправо з заповненням бітів (розрядів) нулями (т.е. від'ємне число (з 1 на початку) перестає
        // бути від'ємним (приклад 10001010 >>> 2 = 00100010))


        ////оператори присвоєння
        result += y; // аналогічно result = result + y
        result -= y; // аналогічно result = result - y
        result *= y; // аналогічно result = result * y
        result /= y; // аналогічно result = result / y
        result %= y; // аналогічно result = result % y (залишок від ділення 105 на 5 буде 0)
        boolean a = true; boolean b = false;
        a |= b; // аналогічно a = a | b (поверне true, т.к. побітовий "АБО", при наявності true в одному з умов, поверне true)
        a &= b; // аналогічно a = a & b (поверне true, т.к. побітовий "І", при наявності false в одному з умов, поверне false)


        ////оператор інкремента та декремента
        result = y++; // постфіксний інкремент (спочатку result присвоюється значення y, а потім y збільшується на 1)
        result = ++y; // префіксний інкремент (в змінну result записується вже збільшене на 1 значення y)
            // результат наступного обчислення буде result = ++х + ++х --- result = 2 + 3
        result = y--; // постфіксний декремент (спочатку result присвоюється значення y, а потім y зменшується на 1)
        result = --y; // префіксний декремент (в змінну result записується вже зменшене на 1 значення y)


        ////тернарний оператор
        result = x > y ? i : j; // аналогічно - if(x > y) { i } else { j }

    }
}
